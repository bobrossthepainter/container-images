name: Get latest versions

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *"

jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ github.token }}
          fetch-depth: 1
      - name: Fetch new base versions
        run: |
          find ./base -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | while read app; do
            if test -f "./base/${app}/latest-base-version.sh"; then
              base_version=$(bash "./base/${app}/latest-base-version.sh")
              current_base_version="$(cat ./base/${app}/BASE_VERSION)"
              echo "DEBUG: base:$base_version current:$current_base_version"
              if [[ ! -z "${base_version}" || "${base_version}" != "null" ]]; then
                echo "${base_version}" | tee "./base/${app}/BASE_VERSION" > /dev/null
                echo "${app} ${base_version}"
              fi
            fi
            if [[ "${base_version}" != "${current_base_version}" && -f "./base/${app}/new-image-version.sh" ]]; then
              image_version=$(bash "./base/${app}/new-image-version.sh")
              if [[ ! -z "${image_version}" || "${image_version}" != "null" ]]; then
                echo "${image_version}" | tee "./base/${app}/IMAGE_VERSION" > /dev/null
                echo "${app} ${image_version}"
              fi
            fi
          done
      # - name: Fetch new app versions
      #   run: |
      #     find ./apps -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | while read app; do
      #       if test -f "./apps/${app}/latest-version.sh"; then
      #         version=$(bash "./apps/${app}/latest-version.sh")
      #         if [[ ! -z "${version}" || "${version}" != "null" ]]; then
      #           echo "${version}" | tee "./apps/${app}/VERSION" > /dev/null
      #           echo "${app} ${version}"
      #         fi
      #       fi
      #     done

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
      # - name: Add, commit and push to applications version file
      #   run: |
      #     if [[ -n $(git status --porcelain) ]]; then
      #       git config user.name "$GITHUB_ACTOR"
      #       git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      #       git add -A
      #       git commit -sam "chore: add new release versions" || exit 0
      #       git push
      #     fi
